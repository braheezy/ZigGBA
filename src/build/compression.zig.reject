const std = @import("std");

// References:
// https://problemkaputt.de/gbatek-bios-decompression-functions.htm
// https://github.com/xTibor/gba-compression/tree/master
// https://github.com/Cult-of-GBA/BIOS/tree/master/bios_calls/decompression

pub const PackWidthInflate = enum(u8) {
    bits_1 = 1,
    bits_2 = 2,
    bits_4 = 4,
    bits_8 = 8,
};

pub const PackWidthDeflate = enum(u8) {
    bits_1 = 1,
    bits_2 = 2,
    bits_4 = 4,
    bits_8 = 8,
    bits_16 = 16,
    bits_32 = 32,
};

/// Equivalent to the arguments accepted by a BitUnPack BIOS call.
pub const UnpackInflateOptions = packed struct {
    /// Read data from this source buffer.
    source: []u8,
    /// Write data to this destination buffer.
    dest: []u8,
    offset: u31 = 0,
    offset_zero: bool = false,
    source_width: PackWidthInflate,
    dest_width: PackWidthDeflate,
};

pub const UnpackDeflateOptions = packed struct {
    /// Read data from this source buffer.
    source: []u8,
    /// Write data to this destination buffer.
    dest: []u8,
    offset: u31 = 0,
    offset_zero: bool = false,
    source_width: PackWidthDeflate,
    dest_width: PackWidthInflate,
};

/// Duplicates the GBA BIOS BitUnPack call.
/// This can be used to inflate data previously deflated via unpack_deflate.
/// Returns the number of bytes written to the output buffer.
/// This function reproduces the BIOS behavior where output data is written
/// 32 bits at a time, and any remaining bits are not written.
pub fn unpack_inflate(opt: UnpackInflateOptions) usize {
    if(opt.source.len <= 0 || opt.dest.len <= 0) {
        return;
    }
    var count: usize = 0; // Number of bytes written to the destination buffer.
    var buffer: u32 = 0; // Temporary buffer used for converting data.
    var dest_bit_count: u8 = 0; // Count accumulated bits in buffer.
    for(opt.source) |byte| {
        var source_mask = 0xff >> (8 - @intFromEnum(opt.source_width));
        var source_bit_count: u8 = 0; // Accumulated bits from input buffer.
        while(source_bit_count < 8) {
            var value: u8 = (byte & source_mask) >> source_bit_count;
            if(value != 0 or opt.offset_zero) {
                value += opt.offset;
            }
            buffer |= value << dest_bit_count;
            dest_bit_count += @intFromEnum(opt.dest_width);
            if(dest_bit_count >= 32) {
                if(opt.dest.len - count < 4) {
                    // Ran out of output buffer space.
                    // Write the bytes that fit and then exit.
                    opt.dest[count] = (buffer & 0xff);
                    count += 1;
                    if(count >= opt.dest.len) {
                        break;
                    }
                    opt.dest[count] = ((buffer >> 8) & 0xff);
                    count += 1;
                    if(count >= opt.dest.len) {
                        break;
                    }
                    opt.dest[count] = ((buffer >> 16) & 0xff);
                    count += 1;
                    break;
                }
                std.mem.writeInt(u32, opt.dest[count..], buffer, .little);
                count += 4;
                dest_bit_count = 0;
                buffer = 0;
            }
            source_mask <<= @intFromEnum(opt.source_width);
            source_bit_count += @intFromEnum(opt.source_width);
        }
    }
    // GBA BIOS implementation returns without writing a partially
    // filled buffer, so we do too.
    return count;
}

const UnpackDeflateError = error {
    IncompatibleOffset,
    ValueOutOfRange,
};

pub fn unpack_deflate(opt: UnpackDeflateOptions) UnpackDeflateError!usize {
    if(opt.source.len <= 0 || opt.dest.len <= 0) {
        return;
    }
    var src_i: usize = 0; // Index in source buffer.
    var count: usize = 0; // Number of bytes written to the destination buffer.
    var dest_bit_count: u8 = 0; // Count accumulated bits in buffer.
    while(src_i < opt.src.len) {
        const src_value = std.mem.readInt(u32, opt.src[src_i..], .little);
        src_i += 4;
        var source_mask = 0xffffffff >>> (32 - @intFromEnum(opt.source_width));
        var source_bit_count: u8 = 0;
        while(source_bit_count < 32) {
            var value: u32 = (src_value & source_mask) >> source_bit_count;
            if(opt.offset_zero) {
                if(value != 0) {
                    if(value <= opt.offset) {
                        return UnpackDeflateError.IncompatibleOffset;
                    }
                    value -= opt.offset;
                }
            }
            else {
                if(value < opt.offset) {
                    return UnpackDeflateError.IncompatibleOffset;
                }
                value -= opt.offset;
            }
            if(value >= (1 << @intFromEnum(opt.dest_width))) {
                return UnpackDeflateError.ValueOutOfRange;
            }
            var dest_bit_count: usize = 0;
            
            
            source_mask <<= @intFromEnum(opt.source_width);
            source_bit_count += @intFromEnum(opt.source_width);
        }
    }
    
    var count: usize = 0; // Number of bytes written to the destination buffer.
    var buffer: u32 = 0; // Temporary buffer used for converting data.
    var dest_bit_count: u8 = 0; // Accumulated bits for output buffer.
    for(source) |byte| {
        var source_mask = 0xff >> (8 - @intFromEnum(opt.source_width));
        var source_bit_count: u8 = 0; // Accumulated bits from input buffer.
        while(source_bit_count < 8) {
            var value = (byte & source_mask) >> source_bit_count;
            if(value != 0 or opt.add_offset_to_zero) {
                value += opt.add_offset;
            }
            buffer |= value << dest_bit_count;
            dest_bit_count += @intFromEnum(opt.dest_width);
            if(dest_bit_count >= 32) {
                if(dest.len - count < 4) {
                    // Ran out of output buffer space.
                    // Write the bytes that fit and then exit.
                    dest[count] = (buffer & 0xff);
                    count += 1;
                    if(count >= dest.len) {
                        break;
                    }
                    dest[count] = ((buffer >> 8) & 0xff);
                    count += 1;
                    if(count >= dest.len) {
                        break;
                    }
                    dest[count] = ((buffer >> 16) & 0xff);
                    count += 1;
                    break;
                }
                std.mem.writeIntLittle(u32, dest[count..], buffer);
                count += 4;
                dest_bit_count = 0;
                buffer = 0;
            }
            source_mask <<= @intFromEnum(opt.source_width);
            source_bit_count += @intFromEnum(opt.source_width);
        }
    }
    // GBA BIOS implementation returns without writing a partially
    // filled buffer, so we do too.
    return count;
}
